{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortString","goodsFromServer","App","useState","sortField","setsortField","isReverse","setisReverse","visibleGoods","goods","preparedGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","reverse","getPreparedGoods","className","onClick","type","cn","currentState","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,iBAAAA,M,KAiCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMC,EA/BR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAa,YAAOD,GAgB1B,OAdIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EAAWc,SACd,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAAWgB,OACd,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXX,EACKI,EAAcQ,UAGhBR,EAMcS,CAAiBlB,EAAiBG,EAAWE,GAElE,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,WACPhB,EAAaL,EAAWc,WAE1BQ,KAAK,SACLF,UAAS,yBAAoBG,IAAG,CAC9B,WAAYnB,IAAcJ,EAAWc,YANzC,iCAYA,wBACEO,QAAS,WACPhB,EAAaL,EAAWgB,SAE1BM,KAAK,SACLF,UAAS,4BAAuBG,IAAG,CACjC,WAAYnB,IAAcJ,EAAWgB,UANzC,4BAYA,wBACEK,QAAS,WACPd,GAAa,SAACiB,GAAD,OAAmBA,MAElCF,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,YAAajB,IANjB,sBAYEF,GAAaE,IACb,wBACEe,QAAS,WACPhB,EAAa,IACbE,GAAa,IAEfe,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACGZ,EAAaiB,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC7GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d3497f95.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortString {\n  Alphabet = 'alphabet',\n  Length = 'length',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: string,\n  isReverse: boolean,\n): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortString.Alphabet:\n          return good1.localeCompare(good2);\n\n        case SortString.Length:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverse) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setsortField] = useState('');\n  const [isReverse, setisReverse] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, isReverse);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => {\n            setsortField(SortString.Alphabet);\n          }}\n          type=\"button\"\n          className={`button is-info ${cn({\n            'is-light': sortField !== SortString.Alphabet,\n          })}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => {\n            setsortField(SortString.Length);\n          }}\n          type=\"button\"\n          className={`button is-success ${cn({\n            'is-light': sortField !== SortString.Length,\n          })}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => {\n            setisReverse((currentState) => !currentState);\n          }}\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReverse,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReverse) && (\n          <button\n            onClick={() => {\n              setsortField('');\n              setisReverse(false);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}